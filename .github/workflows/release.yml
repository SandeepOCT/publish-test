name: Semantic Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type (stable or alpha)'
        required: true
        default: 'stable'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Get the current version from package.json
      - name: Get current version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Current Version: $VERSION"

          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          echo "current_alpha_branch=${VERSION}-alpha" >> $GITHUB_OUTPUT

      # Checkout or create version branch for alpha release
      - name: Checkout or create version branch for alpha release
        if: github.event.inputs.release_type == 'alpha'
        run: |
          VERSION="${{ steps.version.outputs.current_version }}"
          ALPHA_BRANCH="${{ steps.version.outputs.current_alpha_branch }}"

          # Fetch all branches to ensure we're up-to-date with the remote
          git fetch origin

          # Check if the alpha branch exists remotely, then checkout
          if git rev-parse --verify --quiet "$ALPHA_BRANCH"; then
            echo "Branch $ALPHA_BRANCH exists locally, checking it out."
            git checkout "$ALPHA_BRANCH"

            # Check if the current branch is up-to-date with main
            git fetch origin "${{ github.event.repository.default_branch }}"

            if ! git merge-base --is-ancestor origin/main "$ALPHA_BRANCH"; then
              echo "The branch $ALPHA_BRANCH is not up-to-date with main. Rebasing..."
              # Stash any local changes
              git stash

              # Rebase with main
              git rebase main -f

              # Check if the rebase was successful
              if [ $? -ne 0 ]; then
                echo "Rebase failed. Please resolve conflicts and try again."
                exit 1
              fi
              
            else
              echo "The branch $ALPHA_BRANCH is already up-to-date with main."
            fi
          else  
            echo "Branch $ALPHA_BRANCH does not exist. Creating it from main."
            git checkout -b "$ALPHA_BRANCH" origin/main
          fi

          # Push the branch to the remote
          git push origin "$ALPHA_BRANCH"

      # Run Semantic Release
      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        run: |
          if [[ "${{ github.event.inputs.release_type }}" == "alpha" ]]; then
            git checkout "${{ steps.version.outputs.current_alpha_branch }}"
            npx semantic-release --branches "alpha"
          else
            git checkout main
            npx semantic-release --branches "main"
          fi
